@model EmployeePerformance

@{
    ViewBag.Title = "Employee Performance Evaluation";
    // Hard-code EmployeeId for demonstration (simulate logged-in user)

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewBag.Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Include Bootstrap CSS (v5) -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-beta3/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        /* Custom styles for the performance tables and cards */
        .performance-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: #fff;
        }

            .performance-table th,
            .performance-table td {
                border: 1px solid #dee2e6;
                padding: 10px;
                vertical-align: middle;
            }

            .performance-table th {
                background-color: #E5E7EB !important; /* Force blue background */
                color: #111827;
            }

            .performance-table input {
                width: 100%;
                padding: 5px;
                border: 1px solid #ced4da;
                border-radius: 4px;
            }

        .total-score {
            font-weight: bold;
            text-align: right;
            padding: 10px;
            background-color: #f8f9fa;
        }

        .card-header {
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="container my-4">
        <!-- Page Header -->
        <div class="d-md-flex d-block align-items-center justify-content-between page-breadcrumb mb-3">
            <div class="my-auto mb-2">
                <h2 class="mb-1">Performance Review</h2>
                <nav>
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item">
                            <a href="index.html"><i class="ti ti-smart-home"></i></a>
                        </li>
                        <li class="breadcrumb-item">
                            Performance
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">Performance Review</li>
                    </ol>
                </nav>
            </div>
            <div class="head-icons ms-2">
                <a href="javascript:void(0);" class="" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="Collapse" id="collapse-header">
                    <i class="ti ti-chevrons-up"></i>
                </a>
            </div>
        </div>

        <!-- Employee Basic Information -->
        <section class="card mb-4">
            <div class="card-header text-center">
                <h3>Employee Basic Information</h3>
                <p class="text-muted">Please enter your details below</p>
            </div>
            <div class="card-body">
                <form method="post" action="@Url.Action("AddPReview", "Indicators")">
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="Name">Name</label>
                                <input type="text" id="Name" class="form-control" asp-for="Name" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="Department">Department</label>
                                <input type="text" id="Department" class="form-control" asp-for="Department" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="Designation">Designation</label>
                                <input type="text" id="Designation" class="form-control" asp-for="Designation" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="Qualification">Qualification</label>
                                <input type="text" id="Qualification" class="form-control" asp-for="Qualification" />
                            </div>
                        </div>
                        <!-- Column 2 -->
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="EmployeeId">Emp ID</label>
                                <input type="text" id="EmployeeId" class="form-control" value="@Model.EmployeeId" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="DateofJoin">Date of Join</label>
                                <input type="date" id="DateofJoin" class="form-control" asp-for="DateofJoin" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="DateofConfirmation">Date of Confirmation</label>
                                <input type="date" id="DateofConfirmation" class="form-control" asp-for="DateofConfirmation" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="PreviousyearsofExp">Previous years of Exp</label>
                                <input type="text" id="PreviousyearsofExp" class="form-control" asp-for="PreviousyearsofExp" />
                            </div>
                        </div>
                        <!-- Column 3 -->
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="ROName">RO's Name</label>
                                <input type="text" id="ROName" class="form-control" asp-for="ROName" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="RODesignation">RO Designation</label>
                                <input type="text" id="RODesignation" class="form-control" asp-for="RODesignation" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </section>

        <!-- Performance Excellence Section -->
        <section class="card mb-4">
            <div class="card-header border border-bottom-0 text-center">
                <h3 class="mb-2">Personal Excellence</h3>

            </div>
            <div class="card-body">
                <!-- Personal Excellence -->
                <div class="mb-4">

                    <table class="performance-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Personal Attributes</th>
                                <th>Key Indicators</th>
                                <th>Weightage</th>
                                <th>Percentage Achieved (Self)</th>
                                <th>Points Scored (Self)</th>
                                <th>Percentage Achieved (RO)</th>
                                <th>Points Scored (RO)</th>
                            </tr>
                        </thead>
                        <tbody id="personal-excellence"></tbody>
                    </table>
                </div>


            </div>
        </section>


        <section class="card mb-4">
            <div class="card-header border border-bottom-0 text-center">
                <h3 class="mb-2">Professional Excellence</h3>

            </div>
            <div class="card-body">
                <!-- Personal Excellence -->
                <!-- Professional Excellence -->
                <div class="mb-4">

                    <table class="performance-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Key Result Area</th>
                                <th>Key Performance Indicators</th>
                                <th>Weightage</th>
                                <th>Percentage Achieved (Self)</th>
                                <th>Points Scored (Self)</th>
                                <th>Percentage Achieved (RO)</th>
                                <th>Points Scored (RO)</th>




                            </tr>
                        </thead>
                        <tbody id="professional-excellence"></tbody>
                    </table>
                </div>
                @* 
                <div class="text-end">
                    <button type="button" class="btn btn-primary" onclick="saveAllData()">Save All Data</button>
                </div>
 *@

            </div>
        </section>





    </div>

    <!-- JavaScript: jQuery and Bootstrap Bundle -->
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-beta3/js/bootstrap.bundle.min.js"></script>
    <script>
        // Data definitions for the performance evaluation tables
        const personalData = [
            { id: 1, attribute: "Attendance", indicator: "Planned or Unplanned Leaves", weight: 2 },
            { id: 2, attribute: "Attendance", indicator: "Time Consciousness", weight: 2 },
            { id: 3, attribute: "Attitude & Behavior", indicator: "Team Collaboration", weight: 2 },
            { id: 4, attribute: "Attitude & Behavior", indicator: "Professionalism & Responsiveness", weight: 2 },
            { id: 5, attribute: "Policy & Procedures", indicator: "Adherence to policies and procedures", weight: 2 },
            { id: 6, attribute: "Initiatives", indicator: "Special Efforts, Suggestions, Ideas, etc.", weight: 2 },
            { id: 7, attribute: "Continuous Skill Improvement", indicator: "Preparedness to move to next level & Training utilization", weight: 3 }
        ];

        const professionalData = [
            { id: 1, area: "Production", indicator: "Quality", weight: 30 },
            { id: 2, area: "Production", indicator: "TAT (turn around time)", weight: 30 },
            { id: 3, area: "Process Improvement", indicator: "PMS, New Ideas", weight: 10 },
            { id: 4, area: "Team Management", indicator: "Team Productivity, dynamics, attendance, attrition", weight: 5 },
            { id: 5, area: "Knowledge Sharing", indicator: "Sharing the knowledge for team productivity", weight: 5 },
            { id: 6, area: "Reporting and Communication", indicator: "Emails/Calls/Reports and Other Communication", weight: 5 }
        ];



        $(document).ready(function () {
            var employeeId = '@Model.EmployeeId'; // Get Employee ID from Razor Model

            // AJAX request to get Employee Data
            $.ajax({
                url: '@Url.Action("GetEmployeeReviewData", "EmployeePerformance")',
                type: 'GET',
                data: { id: employeeId },
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        populateEmployeeDetails(response.EmployeeDetails);
                        generateTable(response.PersonalExcellenceRecords, "personal-excellence");
                        generateTable(response.ProfessionalExcellenceRecords, "professional-excellence");
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching employee data: " + error);
                }
            });
        });

        $(document).ready(function () {
            var employeeId = '@Model.EmployeeId'; // Get Employee ID from Razor Model

            // Fetch Employee Data
            $.ajax({
                url: '@Url.Action("GetEmployeeReviewData", "EmployeePerformance")',
                type: 'GET',
                data: { id: employeeId },
                dataType: 'json',
                success: function (response) {
                    console.log("API Response:", response); // Debugging

                    if (!response.success || !response.employeeDetails) {
                        alert(response.message || "Error fetching employee data.");
                        return;
                    }

                    populateEmployeeDetails(response.employeeDetails);
                    generateTable(response.personalExcellenceRecords, "personal-excellence");
                    generateTable(response.professionalExcellenceRecords, "professional-excellence");
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching employee data: " + error);
                }
            });
        });

        // Populate Employee Details
        function populateEmployeeDetails(employee) {
            if (!employee) {
                console.error("Employee details not found.");
                return;
            }

            $("#Name").val(employee.name || '');
            $("#Department").val(employee.department || '');
            $("#Designation").val(employee.designation || '');
            $("#Qualification").val(employee.qualification || '');
            $("#EmployeeId").val(employee.employeeId || '');
            $("#DateofJoin").val(employee.dateofJoin.split("T")[0] || '');
            $("#DateofConfirmation").val(employee.dateofConfirmation.split("T")[0] || '');
            $("#PreviousyearsofExp").val(employee.previousyearsofExp || '');
            $("#ROName").val(employee.roName || '');
            $("#RODesignation").val(employee.roDesignation || '');
        }

        // Generate Performance Table
        function generateTable(data, tableId) {
            if (!data || data.length === 0) {
                console.warn("No data for " + tableId);
                return;
            }

            const tableBody = document.getElementById(tableId);
            let html = "";
            data.forEach((row, index) => {
                html += `
                        <tr data-weight="${row.weightage}">
                            <td>${index + 1}</td>
                            <td>${row.subCategory || ''}</td>
                            <td>${row.subCategory || ''}</td>
                            <td>${row.weightage || 0}</td>
                            <td>
                                <input type="number" class="percentage self" placeholder="%" value="${row.percentage_Achieved_Self || 0}" onchange="calculateScores()">
                            </td>
                            <td>
                                <input type="number" class="points self" value="${row.points_Scored_Self || 0}">
                            </td>
                            <td>
                                <input type="number" class="percentage ro" placeholder="%" value="${row.percentage_Achieved_RO || 0}" onchange="calculateScores()">
                            </td>
                            <td>
                                <input type="number" class="points ro" value="${row.points_Scored_RO || 0}">
                            </td>
                        </tr>
                    `;
            });
            tableBody.innerHTML = html;
        }

        // Calculate Scores Automatically
        function calculateScores() {
            let totalScore = 0;
            document.querySelectorAll("tr").forEach(tr => {
                const weight = parseFloat(tr.getAttribute("data-weight"));
                const selfPercentageInput = tr.querySelector("input.percentage.self");
                const roPercentageInput = tr.querySelector("input.percentage.ro");
                const selfPointsInput = tr.querySelector("input.points.self");
                const roPointsInput = tr.querySelector("input.points.ro");

                let selfPercentage = parseFloat(selfPercentageInput.value) || 0;
                let roPercentage = parseFloat(roPercentageInput.value) || 0;

                let selfPoints = (selfPercentage / 100) * weight;
                let roPoints = (roPercentage / 100) * weight;

                if (selfPointsInput) {
                    selfPointsInput.value = selfPoints.toFixed(2);
                }
                if (roPointsInput) {
                    roPointsInput.value = roPoints.toFixed(2);
                }

                totalScore += selfPoints + roPoints;
            });

            document.getElementById("total-score").innerText = totalScore.toFixed(2);
        }

        // Function to gather both employee details and performance data, then post via AJAX
        function saveAllData() {
            // Gather employee details from the input fields
            var employeeDetails = {
                Name: document.getElementById("Name").value,
                Department: document.getElementById("Department").value,
                Designation: document.getElementById("Designation").value,
                Qualification: document.getElementById("Qualification").value,
                EmployeeId: document.getElementById("EmployeeId").value,
                DateofJoin: document.getElementById("DateofJoin").value,
                DateofConfirmation: document.getElementById("DateofConfirmation").value,
                PreviousyearsofExp: document.getElementById("PreviousyearsofExp").value,
                ROName: document.getElementById("ROName").value,
                RODesignation: document.getElementById("RODesignation").value
            };

            // Validate required field: ROName must not be null or empty
            if (!employeeDetails.ROName || employeeDetails.ROName.trim() === "") {
                alert("RO Name cannot be null");
                return;
            }

            // Create an array to hold all performance records
            let records = [];

            // Gather records from the Personal Excellence table
            document.querySelectorAll("#personal-excellence tr").forEach(tr => {
                const cells = tr.getElementsByTagName("td");
                let record = {
                    // Copy employee details into the record
                    Name: employeeDetails.Name,
                    Department: employeeDetails.Department,
                    Designation: employeeDetails.Designation,
                    Qualification: employeeDetails.Qualification,
                    EmployeeId: parseInt(employeeDetails.EmployeeId) || parseInt('@ViewBag.EmployeeId'),
                    DateofJoin: employeeDetails.DateofJoin,
                    DateofConfirmation: employeeDetails.DateofConfirmation,
                    PreviousyearsofExp: parseInt(employeeDetails.PreviousyearsofExp) || 0,
                    ROName: employeeDetails.ROName,
                    RODesignation: employeeDetails.RODesignation,
                    // Performance-specific data
                    Category: "Personal Excellence",
                    SubCategory: cells[1].innerText,
                    Weightage: parseInt(cells[3].innerText),
                    Percentage_Achieved_Self: parseFloat(tr.querySelector("input.percentage.self").value) || 0,
                    Points_Scored_Self: parseFloat(tr.querySelector("input.points.self").value) || 0,
                    Percentage_Achieved_RO: parseFloat(tr.querySelector("input.percentage.ro").value) || 0,
                    Points_Scored_RO: parseFloat(tr.querySelector("input.points.ro").value) || 0
                };
                records.push(record);
            });

            // Gather records from the Professional Excellence table
            document.querySelectorAll("#professional-excellence tr").forEach(tr => {
                const cells = tr.getElementsByTagName("td");
                let record = {
                    Name: employeeDetails.Name,
                    Department: employeeDetails.Department,
                    Designation: employeeDetails.Designation,
                    Qualification: employeeDetails.Qualification,
                    EmployeeId: parseInt(employeeDetails.EmployeeId) || parseInt('@ViewBag.EmployeeId'),
                    DateofJoin: employeeDetails.DateofJoin,
                    DateofConfirmation: employeeDetails.DateofConfirmation,
                    PreviousyearsofExp: parseInt(employeeDetails.PreviousyearsofExp) || 0,
                    ROName: employeeDetails.ROName,
                    RODesignation: employeeDetails.RODesignation,
                    Category: "Professional Excellence",
                    SubCategory: cells[1].innerText,
                    Weightage: parseInt(cells[3].innerText),
                    Percentage_Achieved_Self: parseFloat(tr.querySelector("input.percentage.self").value) || 0,
                    Points_Scored_Self: parseFloat(tr.querySelector("input.points.self").value) || 0,
                    Percentage_Achieved_RO: parseFloat(tr.querySelector("input.percentage.ro").value) || 0,
                    Points_Scored_RO: parseFloat(tr.querySelector("input.points.ro").value) || 0
                };
                records.push(record);
            });

            // Post the combined records via AJAX to the controller action
            $.ajax({
                url: '@Url.Action("AddPReview", "EmployeePerformance")',
                type: 'POST',
                data: JSON.stringify(records),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        alert("Data saved successfully!");
                    } else {
                        alert("Failed to save data: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("Error saving data: " + error);
                }
            });
        }

        // Initialize the tables when the document is ready
        $(document).ready(function () {
            generateTable(personalData, "personal-excellence");
            generateTable(professionalData, "professional-excellence");
        });
    </script>
</body>
</html>